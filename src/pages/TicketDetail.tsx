
import { useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { ArrowLeft, Send } from "lucide-react";

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const ticketsData = [
  {
    id: "T-1001",
    customer: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤",
    subject: "–í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ",
    status: "–ù–æ–≤—ã–π",
    source: "Email",
    date: "2025-05-19T09:30:00",
    assignedTo: "–û–ø–µ—Ä–∞—Ç–æ—Ä 1",
    messages: [
      {
        id: "m-1",
        from: "client",
        text: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞ ‚Ññ12345. –î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–ª–∏—Å—å, –Ω–æ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.",
        date: "2025-05-19T09:30:00",
      },
      {
        id: "m-2",
        from: "operator",
        text: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        date: "2025-05-19T09:45:00",
        operator: "–û–ø–µ—Ä–∞—Ç–æ—Ä 1",
      },
      {
        id: "m-3",
        from: "client",
        text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç. –ë—É–¥—É –∂–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
        date: "2025-05-19T10:15:00",
      },
    ],
    customerId: "C-1001",
  },
  {
    id: "T-1002",
    customer: "–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
    subject: "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–≤–∏—Å",
    status: "–í —Ä–∞–±–æ—Ç–µ",
    source: "Telegram",
    date: "2025-05-18T16:45:00",
    assignedTo: "–û–ø–µ—Ä–∞—Ç–æ—Ä 2",
    messages: [
      {
        id: "m-4",
        from: "client",
        text: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –Ω–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –ü–∏—à–µ—Ç –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
        date: "2025-05-18T16:45:00",
      },
    ],
    customerId: "C-1002",
  },
];

const getStatusClass = (status: string) => {
  switch (status) {
    case "–ù–æ–≤—ã–π":
      return "bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-xs font-medium";
    case "–í —Ä–∞–±–æ—Ç–µ":
      return "bg-yellow-100 text-yellow-800 px-2 py-1 rounded-md text-xs font-medium";
    case "–û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞":
      return "bg-purple-100 text-purple-800 px-2 py-1 rounded-md text-xs font-medium";
    case "–ó–∞–∫—Ä—ã—Ç":
      return "bg-green-100 text-green-800 px-2 py-1 rounded-md text-xs font-medium";
    default:
      return "bg-gray-100 text-gray-800 px-2 py-1 rounded-md text-xs font-medium";
  }
};

const getSourceIcon = (source: string) => {
  switch (source) {
    case "Email":
      return "üìß";
    case "Telegram":
      return "üì±";
    case "WhatsApp":
      return "üìû";
    case "VK.com":
      return "üë•";
    case "–ß–∞—Ç –Ω–∞ —Å–∞–π—Ç–µ":
      return "üí¨";
    case "–§–æ—Ä–º–∞ –Ω–∞ —Å–∞–π—Ç–µ":
      return "üìù";
    default:
      return "üí¨";
  }
};

export default function TicketDetail() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { toast } = useToast();
  
  const ticket = ticketsData.find(t => t.id === id);
  const [newReply, setNewReply] = useState("");
  const [ticketStatus, setTicketStatus] = useState(ticket?.status || "–ù–æ–≤—ã–π");
  const [ticketAssignee, setTicketAssignee] = useState(ticket?.assignedTo || "");
  
  if (!ticket) {
    return (
      <div className="container mx-auto p-4">
        <Button variant="ghost" onClick={() => navigate("/tickets")} className="mb-4">
          <ArrowLeft className="h-4 w-4 mr-2" /> –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤
        </Button>
        <div className="text-center p-8">
          <h2 className="text-2xl font-bold">–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
          <p className="mt-2">–¢–∏–∫–µ—Ç —Å ID {id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.</p>
        </div>
      </div>
    );
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    }).format(date);
  };

  const handleStatusChange = (value: string) => {
    setTicketStatus(value);
    toast({
      title: "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω",
      description: `–¢–∏–∫–µ—Ç ${ticket.id} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å "${value}"`,
    });
  };

  const handleAssigneeChange = (value: string) => {
    setTicketAssignee(value);
    toast({
      title: "–ù–∞–∑–Ω–∞—á–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π",
      description: `–¢–∏–∫–µ—Ç ${ticket.id} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ "${value}"`,
    });
  };

  const handleSendReply = () => {
    if (!newReply.trim()) return;
    
    toast({
      title: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
      description: "–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.",
    });
    
    setNewReply("");
  };

  return (
    <div className="container mx-auto p-4">
      <Button variant="ghost" onClick={() => navigate("/tickets")} className="mb-4">
        <ArrowLeft className="h-4 w-4 mr-2" /> –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤
      </Button>
      
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <div className="lg:col-span-3">
          <Card className="mb-6">
            <CardHeader className="pb-3">
              <CardTitle className="flex justify-between items-start">
                <div>
                  <h1 className="text-2xl font-bold">{ticket.subject}</h1>
                  <div className="text-sm text-muted-foreground">
                    {ticket.id} ‚Ä¢ {formatDate(ticket.date)}
                  </div>
                </div>
                <div className="flex space-x-2">
                  <span className={getStatusClass(ticketStatus)}>
                    {ticketStatus}
                  </span>
                  <Badge variant="outline" className="ml-2">
                    {getSourceIcon(ticket.source)} {ticket.source}
                  </Badge>
                </div>
              </CardTitle>
            </CardHeader>
          </Card>
          
          <div className="space-y-6 mb-6">
            {ticket.messages.map((message) => (
              <Card key={message.id} className={`${message.from === 'client' ? 'border-l-4 border-l-blue-500' : 'border-l-4 border-l-green-500'}`}>
                <CardContent className="pt-6">
                  <div className="flex justify-between items-start mb-2">
                    <div className="font-medium">
                      {message.from === 'client' ? ticket.customer : message.operator}
                    </div>
                    <div className="text-sm text-muted-foreground">
                      {formatDate(message.date)}
                    </div>
                  </div>
                  <div className="mt-2 whitespace-pre-line">{message.text}</div>
                </CardContent>
              </Card>
            ))}
          </div>
          
          <Card>
            <CardHeader>
              <CardTitle>–û—Ç–≤–µ—Ç–∏—Ç—å</CardTitle>
            </CardHeader>
            <CardContent>
              <Textarea 
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É..." 
                className="min-h-32 mb-4"
                value={newReply}
                onChange={(e) => setNewReply(e.target.value)}
              />
              <div className="flex justify-end">
                <Button onClick={handleSendReply}>
                  <Send className="h-4 w-4 mr-2" /> –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
        
        <div>
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>–î–µ—Ç–∞–ª–∏ —Ç–∏–∫–µ—Ç–∞</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h3 className="text-sm font-medium mb-1">–ö–ª–∏–µ–Ω—Ç</h3>
                <div className="flex items-center">
                  <Button 
                    variant="link" 
                    className="p-0 h-auto" 
                    onClick={() => navigate(`/clients/${ticket.customerId}`)}
                  >
                    {ticket.customer}
                  </Button>
                </div>
              </div>
              
              <div>
                <h3 className="text-sm font-medium mb-1">–°—Ç–∞—Ç—É—Å</h3>
                <Select value={ticketStatus} onValueChange={handleStatusChange}>
                  <SelectTrigger className={getStatusClass(ticketStatus)}>
                    <SelectValue placeholder={ticketStatus} />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="–ù–æ–≤—ã–π">–ù–æ–≤—ã–π</SelectItem>
                    <SelectItem value="–í —Ä–∞–±–æ—Ç–µ">–í —Ä–∞–±–æ—Ç–µ</SelectItem>
                    <SelectItem value="–û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞">–û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞</SelectItem>
                    <SelectItem value="–ó–∞–∫—Ä—ã—Ç">–ó–∞–∫—Ä—ã—Ç</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <h3 className="text-sm font-medium mb-1">–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π</h3>
                <Select value={ticketAssignee} onValueChange={handleAssigneeChange}>
                  <SelectTrigger>
                    <SelectValue placeholder="–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</SelectItem>
                    <SelectItem value="–û–ø–µ—Ä–∞—Ç–æ—Ä 1">–û–ø–µ—Ä–∞—Ç–æ—Ä 1</SelectItem>
                    <SelectItem value="–û–ø–µ—Ä–∞—Ç–æ—Ä 2">–û–ø–µ—Ä–∞—Ç–æ—Ä 2</SelectItem>
                    <SelectItem value="–û–ø–µ—Ä–∞—Ç–æ—Ä 3">–û–ø–µ—Ä–∞—Ç–æ—Ä 3</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <h3 className="text-sm font-medium mb-1">–ò—Å—Ç–æ—á–Ω–∏–∫</h3>
                <div>
                  <Badge variant="outline">
                    {getSourceIcon(ticket.source)} {ticket.source}
                  </Badge>
                </div>
              </div>
              
              <div>
                <h3 className="text-sm font-medium mb-1">–°–æ–∑–¥–∞–Ω</h3>
                <div className="text-sm">{formatDate(ticket.date)}</div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>–î–µ–π—Å—Ç–≤–∏—è</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <Button variant="outline" className="w-full justify-start">
                –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
              </Button>
              <Button variant="outline" className="w-full justify-start">
                –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç
              </Button>
              <Button variant="outline" className="w-full justify-start">
                –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –¥—Ä—É–≥–∏–º —Ç–∏–∫–µ—Ç–æ–º
              </Button>
              <Button variant="outline" className="w-full justify-start text-red-500 hover:text-red-700">
                –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
